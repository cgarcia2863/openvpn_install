---
# tasks file for openvpn_install
- name: "Install OpenVPN and Required Packages"
  tags:
    - setup
    - packages
  ansible.builtin.apt:
    name:
      - openvpn
      - openssl
      - ca-certificates
      - iptables
    state: present

- name: Create easy-rsa directory
  tags:
    - setup
    - easyrsa
    - packages
  ansible.builtin.file:
    path: "{{ easy_rsa_path }}"
    state: directory
    mode: '0750'
    owner: root
    group: root

- name: Download easy-rsa package
  tags:
    - setup
    - easyrsa
    - packages
  ansible.builtin.unarchive:
    src: "{{ easy_rsa_url }}"
    dest: "{{ easy_rsa_path }}"
    remote_src: yes
    extra_opts:
      - "--strip-components"
      - "1"

- name: check for previous easy-rsa pki data
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.stat:
    path: "{{ easy_rsa_path }}/pki"
  register: pki_dir

- name: easy-rsa run init-pki
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  when: not pki_dir.stat.exists
  ansible.builtin.command: "{{ easy_rsa_path }}/easyrsa init-pki"
  args:
    chdir: "{{ easy_rsa_path }}"

- name: check for previous easy-rsa certificate
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.stat:
    path: "{{ easy_rsa_path }}/pki/ca.crt"
  register: pki_ca

- name: easy-rsa run build-ca
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  when: not pki_ca.stat.exists
  ansible.builtin.command: "{{ easy_rsa_path }}/easyrsa --batch build-ca nopass"
  args:
    chdir: "{{ easy_rsa_path }}"

- name: check for previous easy-rsa server data
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.stat:
    path: "{{ easy_rsa_path }}/pki/issued/server.crt"
  register: pki_server

- name: easy-rsa run build-server-full server
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  when: not pki_server.stat.exists
  environment:
    EASYRSA_CERT_EXPIRE: "{{ easy_rsa_server_cert_expire }}"
  ansible.builtin.command: "{{ easy_rsa_path }}/easyrsa build-server-full server nopass"
  args:
    chdir: "{{ easy_rsa_path }}"

- name: check for previous easy-rsa crl data
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.stat:
    path: "{{ easy_rsa_path }}/pki/crl.pem"
  register: pki_crl

- name: easy-rsa run gen-crl
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  when: not pki_crl.stat.exists
  environment:
    EASYRSA_CERT_EXPIRE: "{{ easy_rsa_crl_days }}"
  ansible.builtin.command: "{{ easy_rsa_path }}/easyrsa gen-crl"
  args:
    chdir: "{{ easy_rsa_path }}"

- name: Copy CA certificate
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.copy:
    src: "{{ easy_rsa_path }}/pki/ca.crt"
    dest: /etc/openvpn/server/ca.crt
    remote_src: yes

- name: Copy CA key
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.copy:
    src: "{{ easy_rsa_path }}/pki/private/ca.key"
    dest: /etc/openvpn/server/ca.key
    remote_src: yes

- name: Copy server certificate
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.copy:
    src: "{{ easy_rsa_path }}/pki/issued/server.crt"
    dest: /etc/openvpn/server/server.crt
    remote_src: yes

- name: Copy server key
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.copy:
    src: "{{ easy_rsa_path }}/pki/private/server.key"
    dest: /etc/openvpn/server/server.key
    remote_src: yes

- name: Copy crl
  tags:
    - setup
    - easyrsa
    - create_openvpn_server_certs
  ansible.builtin.copy:
    src: "{{ easy_rsa_path }}/pki/crl.pem"
    dest: /etc/openvpn/server/crl.pem
    remote_src: yes

- name: Change file ownership of crl
  tags:
    - setup
    - openvpn
  ansible.builtin.file:
    path: /etc/openvpn/server/crl.pem
    owner: nobody
    group: "{{ openvpn_group }}"

- name: Change directory ownership /etc/openvpn/server/
  tags:
    - setup
    - openvpn
  ansible.builtin.file:
    path: /etc/openvpn/server/
    owner: nobody
    mode: o=x

- name: check for tls-crypt key
  tags:
    - setup
    - openvpn
  ansible.builtin.stat:
    path: /etc/openvpn/server/tc.key
  register: tls_crypt_key

- name: Generate key for tls-crypt
  tags:
    - setup
    - openvpn
  when: not tls_crypt_key.stat.exists
  ansible.builtin.command: openvpn --genkey --secret /etc/openvpn/server/tc.key

- name: Create the DH parameters file using the predefined ffdhe2048 group
  tags:
    - setup
    - openvpn
  ansible.builtin.copy:
    content: "{{ openvpn_dh_params }}"
    dest: /etc/openvpn/server/dh.pem

- name: Generate server.conf
  tags:
    - setup
    - openvpn
    - gen_openvpn_config
  notify: "Restart openvpn-server"
  ansible.builtin.template:
    src: server.conf.j2
    dest: /etc/openvpn/server/server.conf

- name: start and enable openvpn-server@server.service
  tags:
    - setup
    - openvpn
    - gen_openvpn_config
  ansible.builtin.systemd:
    daemon_reload: yes
    name: openvpn-server@server.service
    state: started
    enabled: yes

- name: Enable net.ipv4.ip_forward for the system
  tags:
    - setup
    - openvpn
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/99-openvpn-forward.conf
    sysctl_set: yes

- name: Generate openvpn-iptables.service
  tags:
    - setup
    - openvpn
    - gen_openvpn_config
  notify: "Restart openvpn-iptables"
  ansible.builtin.template:
    src: openvpn-iptables.service.j2
    dest: /etc/systemd/system/openvpn-iptables.service

- name: start and enable openvpn-iptables.service
  tags:
    - setup
    - openvpn
    - gen_openvpn_config
  ansible.builtin.systemd:
    daemon_reload: yes
    name: openvpn-iptables.service
    state: started
    enabled: yes

- name: Obtain Public IP
  tags:
    - client_setup
    - obtain_public_ip
  when: openvpn_public_ip_addr == ''
  ansible.builtin.uri:
    url: https://ipinfo.io/ip
    return_content: yes
  register: public_ip

- name: "check for previous easy-rsa {{ openvpn_client_name }} data"
  tags:
    - client_setup
    - create_openvpn_client
  ansible.builtin.stat:
    path: "{{ easy_rsa_path }}/pki/issued/{{ openvpn_client_name }}.crt"
  register: pki_client

- name: "easy-rsa run build-client-full {{ openvpn_client_name }}"
  tags:
    - client_setup
    - create_openvpn_client
  when: not pki_client.stat.exists
  environment:
    EASYRSA_CERT_EXPIRE: "{{ easy_rsa_client_cert_expire }}"
  ansible.builtin.command: "{{ easy_rsa_path }}/easyrsa build-client-full {{ openvpn_client_name }} nopass"
  args:
    chdir: "{{ easy_rsa_path }}"

- name: read ca.crt
  tags:
    - client_setup
    - create_openvpn_client
  no_log: true
  ansible.builtin.slurp:
    src: /etc/openvpn/server/easy-rsa/pki/ca.crt
  register: openvpn_ca_file

- name: "read {{ openvpn_client_name }} certificate"
  tags:
    - client_setup
    - create_openvpn_client
  no_log: true
  ansible.builtin.shell: "sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/{{ openvpn_client_name }}.crt"
  register: client_cert

- name: "read {{ openvpn_client_name }} key"
  tags:
    - client_setup
    - create_openvpn_client
  no_log: true
  ansible.builtin.slurp:
    src: "/etc/openvpn/server/easy-rsa/pki/private/{{ openvpn_client_name }}.key"
  register: client_key

- name: Read OpenVPN Static key
  tags:
    - client_setup
    - create_openvpn_client
  no_log: true
  ansible.builtin.shell: sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
  register: openvpn_tc_key

- name: Generate Client template
  tags:
    - client_setup
    - create_openvpn_client
  ansible.builtin.template:
    src: client.conf.j2
    dest: "/root/{{ openvpn_client_name }}.ovpn"

- name: "Download {{ openvpn_client_name }}.ovpn file"
  tags:
    - client_setup
    - create_openvpn_client
    - download_openvpn_client
  no_log: true
  when: openvpn_client_download_dir is defined
  ansible.builtin.fetch:
    src: "/root/{{ openvpn_client_name }}.ovpn"
    dest: "{{ openvpn_client_download_dir }}/{{ openvpn_client_name }}.ovpn"
    flat: yes

- name:
  tags:
    - client_setup
    - create_openvpn_client
    - email_openvpn_client
  when:
    - mail_username is defined
    - mail_password is defined
    - mail_recipient is defined
  mail:
    host: "{{ mail_host }}"
    port: "{{ mail_port }}"
    username: "{{ mail_username }}"
    password: "{{ mail_password }}"
    to: "{{ mail_recipient }}"
    subject: OpenVPN Client Configuration [Eyes Only]
    body: "OpenVPN client configuration file attached in this email."
    attach: "/root/{{ openvpn_client_name }}.ovpn"
  delegate_to: localhost